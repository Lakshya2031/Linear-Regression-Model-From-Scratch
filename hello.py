# -*- coding: utf-8 -*-
"""hello.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fsrry07RhuHkUX83AgmrDV_PmWyzWzqy
"""

import numpy as np
import pandas as pd

class Linear_Regression():
  #initiating the parameters
  def __init__(self,learning_rate,no_of_iteration):
    self.learning_rate=learning_rate # Basically what is the step size
    self.no_of_iteration=no_of_iteration #how many times we want to iterate

  def fit(self,X,Y):
    self.X = np.array(X)
    self.Y = np.array(Y)
    if self.X.ndim == 1:
     self.X = self.X.reshape(-1, 1)
    self.m, self.n = self.X.shape

    #initiating the weight and bias
    self.w=np.zeros(self.n) # basically number of weigths will be eaualt to number of columns or the features that we have
    self.b=0

    for i in range(0,self.no_of_iteration):
      self.update_weights()




  def update_weights(self):
    Y_prediction=self.predict(self.X)

    # formula for updation of weights and biases
    dw=(-2)*(self.X.T).dot(self.Y-Y_prediction)/self.m
    db=(-2)*np.sum(self.Y-Y_prediction)/self.m


    # updating weight and biases
    self.w=self.w-self.learning_rate*dw
    self.b=self.b-self.learning_rate*db




  def predict(self,X):
        X = np.array(X)

        if X.ndim == 1:
          X = X.reshape(-1, 1)
        return X.dot(self.w) + self.b

